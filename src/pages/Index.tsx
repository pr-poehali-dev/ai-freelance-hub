import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import Icon from '@/components/ui/icon';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Textarea } from '@/components/ui/textarea';
import { ScrollArea } from '@/components/ui/scroll-area';

const Index = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedAI, setSelectedAI] = useState('chatgpt');
  const [chatInput, setChatInput] = useState('');
  const [chatHistory, setChatHistory] = useState<{ai: string, messages: {role: 'user' | 'assistant' | 'collective', content: string, aiName?: string}[]}[]>([]);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [showAISelector, setShowAISelector] = useState(false);

  const aiTools = [
    {
      id: 1,
      name: 'ChatGPT',
      description: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤, –∫–æ–¥–∞, –ø–µ—Ä–µ–≤–æ–¥–æ–≤',
      category: '–¢–µ–∫—Å—Ç',
      isPopular: true,
      chatKey: 'chatgpt',
      icon: 'üí¨'
    },
    {
      id: 2,
      name: 'Claude',
      description: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞',
      category: '–¢–µ–∫—Å—Ç',
      isPopular: true,
      chatKey: 'claude',
      icon: 'ü§ñ'
    },
    {
      id: 3,
      name: 'MidJourney',
      description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∞—Ä—Ç–∞ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞',
      category: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      isPopular: true,
      chatKey: 'midjourney',
      icon: 'üé®'
    },
    {
      id: 4,
      name: 'Gemini',
      description: '–ò–ò –æ—Ç Google –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏',
      category: '–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª',
      isPopular: false,
      chatKey: 'gemini',
      icon: '‚ú®'
    },
    {
      id: 5,
      name: 'Google Veo 3',
      description: '–ù–æ–≤–µ–π—à–∏–π –ò–ò –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ',
      category: '–í–∏–¥–µ–æ',
      isPopular: true,
      chatKey: 'veo3',
      icon: 'üé•'
    },
    {
      id: 6,
      name: 'DeepSeek',
      description: '–ú–æ—â–Ω—ã–π –ò–ò –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞',
      category: '–ö–æ–¥',
      isPopular: false,
      chatKey: 'deepseek',
      icon: 'üíª'
    },
    {
      id: 7,
      name: 'Grok',
      description: '–ò–ò —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
      category: '–¢–µ–∫—Å—Ç',
      isPopular: false,
      chatKey: 'grok',
      icon: 'üöÄ'
    },
    {
      id: 8,
      name: 'Stable Diffusion',
      description: '–û—Ç–∫—Ä—ã—Ç—ã–π –ò–ò –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
      category: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      isPopular: false,
      chatKey: 'stablediffusion',
      icon: 'üñºÔ∏è'
    },
    {
      id: 9,
      name: 'GitHub Copilot',
      description: '–ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –ø—Ä—è–º–æ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ',
      category: '–ö–æ–¥',
      isPopular: true,
      chatKey: 'copilot',
      icon: 'üë®‚Äçüíª'
    },
    {
      id: 10,
      name: '–í—Å–µ –ò–ò –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ',
      description: '–ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Å –ª—É—á—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º',
      category: '–ö–æ–ª–ª–µ–∫—Ç–∏–≤',
      isPopular: true,
      chatKey: 'collective',
      icon: 'üß†'
    }
  ];

  const freelanceCategories = [
    {
      title: '–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥',
      tools: ['ChatGPT', 'Claude', 'Gemini'],
      description: '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞—é—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤, —Å—Ç–∞—Ç–µ–π, –ø–æ—Å—Ç–æ–≤',
      icon: '‚úçÔ∏è'
    },
    {
      title: '–î–∏–∑–∞–π–Ω',
      tools: ['MidJourney', 'Stable Diffusion'],
      description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤, –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π, –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤',
      icon: 'üé®'
    },
    {
      title: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
      tools: ['GitHub Copilot', 'ChatGPT', 'DeepSeek'],
      description: '–ù–∞–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞ –∫–æ–¥–∞, —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π',
      icon: 'üíª'
    },
    {
      title: '–ü–µ—Ä–µ–≤–æ–¥—ã',
      tools: ['ChatGPT', 'Claude', 'Gemini'],
      description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º',
      icon: 'üåê'
    },
    {
      title: 'SEO',
      tools: ['ChatGPT', 'Claude', 'Grok'],
      description: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
      icon: 'üìà'
    },
    {
      title: '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö',
      tools: ['ChatGPT', 'Claude', 'Gemini'],
      description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö',
      icon: 'üìä'
    }
  ];

  const faqItems = [
    {
      question: '–í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ?',
      answer: '–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–º–µ—é—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏. –ú—ã —Å–æ–±—Ä–∞–ª–∏ –∏–º–µ–Ω–Ω–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑ –æ–ø–ª–∞—Ç—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.'
    },
    {
      question: '–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ò–ò –¥–ª—è –º–æ–µ–π –∑–∞–¥–∞—á–∏?',
      answer: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª "–î–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤" ‚Äî —Ç–∞–º –º—ã —Ä–∞–∑–±–∏—Ä–∞–µ–º, –∫–∞–∫–æ–π –ò–ò –ª—É—á—à–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞—á.'
    },
    {
      question: '–ù—É–∂–Ω–∞ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è?',
      answer: '–ù–∞ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞. –ù–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∞–º–∏—Ö –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –∏—Ö —Å–∞–π—Ç–∞—Ö.'
    },
    {
      question: '–î–æ–±–∞–≤–∏—Ç–µ –ª–∏ –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã?',
      answer: '–ö–æ–Ω–µ—á–Ω–æ! –ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ª—É—á—à–∏–µ –∏–∑ –Ω–∏—Ö –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É.'
    }
  ];

  const filteredTools = aiTools.filter(tool => 
    tool.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    tool.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
    tool.category.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const handleStartChat = (aiKey: string) => {
    setSelectedAI(aiKey);
    setIsDialogOpen(true);
  };

  const sendMessage = () => {
    if (!chatInput.trim()) return;
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò
    const responses = {
      chatgpt: '–ü—Ä–∏–≤–µ—Ç! –Ø ChatGPT. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å —Ç–µ–∫—Å—Ç–∞–º–∏, –∫–æ–¥–æ–º, –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∏ –∞–Ω–∞–ª–∏–∑–æ–º. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
      claude: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø Claude –æ—Ç Anthropic. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ, —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö –∏ –ø–æ–º–æ—â–∏ –≤ —Ä–∞–±–æ—Ç–µ. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
      gemini: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø Gemini –æ—Ç Google. –£–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏. –ö–∞–∫–∞—è –∑–∞–¥–∞—á–∞ —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–¥ –≤–∞–º–∏?',
      midjourney: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å!',
      veo3: '–ü—Ä–∏–≤–µ—Ç! –Ø Google Veo 3 - –Ω–æ–≤–µ–π—à–∏–π –ò–ò –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ. –û–ø–∏—à–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ!',
      deepseek: '–ü—Ä–∏–≤–µ—Ç! –Ø DeepSeek, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π!',
      grok: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø Grok, —É –º–µ–Ω—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –û —á—ë–º —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?',
      stablediffusion: '–ü—Ä–∏–≤–µ—Ç! –ü–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Stable Diffusion. –û–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É!',
      copilot: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫! –Ø GitHub Copilot, –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∫–æ–¥–æ–º –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º!'
    };

    if (selectedAI === 'collective') {
      // –ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
      const currentChat = chatHistory.find(chat => chat.ai === selectedAI);
      const newMessage = { role: 'user' as const, content: chatInput };
      
      const aiResponses = [
        { role: 'collective' as const, content: `ChatGPT: –Ø —Å—á–∏—Ç–∞—é, —á—Ç–æ "${chatInput}" - –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø–æ–¥—É–º–∞—Ç—å...`, aiName: 'ChatGPT' },
        { role: 'collective' as const, content: `Claude: –Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å ChatGPT, –Ω–æ –¥–æ–±–∞–≤–ª—é: –Ω—É–∂–Ω–æ —Ç–∞–∫–∂–µ —É—á–µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –Ω—é–∞–Ω—Å—ã.`, aiName: 'Claude' },
        { role: 'collective' as const, content: `Gemini: –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ú–æ–π –ø–æ–¥—Ö–æ–¥ –±—É–¥–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –¥—Ä—É–≥–∏–º - —è —Ñ–æ–∫—É—Å–∏—Ä—É—é—Å—å –Ω–∞ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏.`, aiName: 'Gemini' },
        { role: 'collective' as const, content: `üéÜ **–õ–£–ß–®–ò–ô –û–¢–í–ï–¢**: –ü–æ—Å–ª–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è, –º—ã –ø—Ä–∏—à–ª–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤—ã–≤–æ–¥—É –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É: –Ω—É–∂–Ω–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø—Ä–æ—Ä–∞–±–æ—Ç–∫—É, –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞–∏–ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.`, aiName: '–ö–æ–ª–ª–µ–∫—Ç–∏–≤' }
      ];
      
      if (currentChat) {
        currentChat.messages.push(newMessage, ...aiResponses);
        setChatHistory([...chatHistory]);
      } else {
        setChatHistory([...chatHistory, { ai: selectedAI, messages: [newMessage, ...aiResponses] }]);
      }
    } else {
      // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
      const currentChat = chatHistory.find(chat => chat.ai === selectedAI);
      const newMessage = { role: 'user' as const, content: chatInput };
      const aiResponse = { role: 'assistant' as const, content: responses[selectedAI as keyof typeof responses] || '–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?' };
      
      if (currentChat) {
        currentChat.messages.push(newMessage, aiResponse);
        setChatHistory([...chatHistory]);
      } else {
        setChatHistory([...chatHistory, { ai: selectedAI, messages: [newMessage, aiResponse] }]);
      }
    }
    
    setChatInput('');
  };

  const getCurrentChat = () => {
    return chatHistory.find(chat => chat.ai === selectedAI)?.messages || [];
  };

  const selectedTool = aiTools.find(tool => tool.chatKey === selectedAI);

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100">
      {/* Header */}
      <header className="border-b bg-white/80 backdrop-blur-sm sticky top-0 z-40">
        <div className="container mx-auto px-4 py-4">
          <nav className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <div className="w-8 h-8 bg-gradient-to-br from-indigo-600 to-purple-600 rounded-lg flex items-center justify-center">
                <Icon name="Zap" className="w-5 h-5 text-white" />
              </div>
              <h1 className="text-xl font-bold text-slate-900">AI Freelance Hub</h1>
            </div>
            <div className="hidden md:flex items-center space-x-6 text-sm">
              <a href="#tools" className="text-slate-600 hover:text-indigo-600 transition-colors">–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</a>
              <a href="#freelance" className="text-slate-600 hover:text-indigo-600 transition-colors">–§—Ä–∏–ª–∞–Ω—Å–µ—Ä—É</a>
              <a href="#faq" className="text-slate-600 hover:text-indigo-600 transition-colors">FAQ</a>
              <a href="#contacts" className="text-slate-600 hover:text-indigo-600 transition-colors">–ö–æ–Ω—Ç–∞–∫—Ç—ã</a>
            </div>
            <Button size="sm" className="bg-indigo-600 hover:bg-indigo-700">
              –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ
            </Button>
          </nav>
        </div>
      </header>

      {/* Hero Section */}
      <section className="py-20 px-4">
        <div className="container mx-auto max-w-4xl text-center">
          <h1 className="text-5xl md:text-6xl font-bold text-slate-900 mb-6">
            –í—Å–µ –ª—É—á—à–∏–µ –ò–ò –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ ‚Äî{' '}
            <span className="bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
              –±–µ—Å–ø–ª–∞—Ç–Ω–æ
            </span>
          </h1>
          <p className="text-xl text-slate-600 mb-8 max-w-2xl mx-auto">
            –ï–¥–∏–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ª—é–±–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ. 
            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—É—á—à–∏–µ –ò–ò –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤, –ø–µ—Ä–µ–≤–æ–¥–∞, –¥–∏–∑–∞–π–Ω–∞, –∫–æ–¥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞.
          </p>
          
          <div className="flex flex-col sm:flex-row gap-4 justify-center mb-12 max-w-xl mx-auto">
            <div className="relative flex-1">
              <Icon name="Search" className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-5 h-5" />
              <Input 
                placeholder="–ù–∞–π—Ç–∏ –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10 h-12 text-base border-slate-200 focus:border-indigo-500"
              />
            </div>
            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
              <DialogTrigger asChild>
                <Button size="lg" className="bg-indigo-600 hover:bg-indigo-700 px-8" onClick={() => setSelectedAI('chatgpt')}>
                  –ù–∞–π—Ç–∏
                </Button>
              </DialogTrigger>
            </Dialog>
          </div>

          <div className="flex flex-wrap justify-center gap-2 mb-8">
            <Badge variant="secondary" className="text-sm">ChatGPT</Badge>
            <Badge variant="secondary" className="text-sm">Claude</Badge>
            <Badge variant="secondary" className="text-sm">MidJourney</Badge>
            <Badge variant="secondary" className="text-sm">Gemini</Badge>
            <Badge variant="secondary" className="text-sm">DeepSeek</Badge>
          </div>
        </div>
      </section>

      {/* AI Tools Grid */}
      <section id="tools" className="py-16 px-4 bg-white">
        <div className="container mx-auto max-w-6xl">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-slate-900 mb-4">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</h2>
            <p className="text-slate-600 max-w-2xl mx-auto">
              –¢—â–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–Ω–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –ª—É—á—à–∏—Ö –ò–ò-—Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ª—é–±—ã—Ö –∑–∞–¥–∞—á
            </p>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {filteredTools.map((tool) => (
              <Card key={tool.id} className="hover:shadow-lg transition-all duration-300 hover:-translate-y-1 border-slate-200">
                <CardHeader className="pb-3">
                  <div className="flex items-start justify-between mb-2">
                    <div className="text-2xl">{tool.icon}</div>
                    {tool.isPopular && (
                      <Badge variant="secondary" className="text-xs bg-indigo-100 text-indigo-700">
                        –ü–æ–ø—É–ª—è—Ä–Ω—ã–π
                      </Badge>
                    )}
                  </div>
                  <CardTitle className="text-lg text-slate-900">{tool.name}</CardTitle>
                  <CardDescription className="text-sm text-slate-600 line-clamp-2">
                    {tool.description}
                  </CardDescription>
                </CardHeader>
                <CardContent className="pt-0">
                  <div className="flex items-center justify-between">
                    <Badge variant="outline" className="text-xs">
                      {tool.category}
                    </Badge>
                    <Button 
                      size="sm" 
                      className="bg-indigo-600 hover:bg-indigo-700 text-xs px-4"
                      onClick={() => handleStartChat(tool.chatKey)}
                    >
                      –ß–∞—Ç —Å –ò–ò
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* Freelance Section */}
      <section id="freelance" className="py-16 px-4 bg-slate-50">
        <div className="container mx-auto max-w-6xl">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-slate-900 mb-4">–î–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤</h2>
            <p className="text-slate-600 max-w-2xl mx-auto">
              –£–∑–Ω–∞–π—Ç–µ, –∫–∞–∫–∏–µ –ò–ò –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –≤–∞—à–µ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            </p>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {freelanceCategories.map((category, index) => (
              <Card key={index} className="hover:shadow-lg transition-all duration-300">
                <CardHeader>
                  <div className="flex items-center space-x-3 mb-3">
                    <div className="text-2xl">{category.icon}</div>
                    <CardTitle className="text-xl text-slate-900">{category.title}</CardTitle>
                  </div>
                  <CardDescription className="text-slate-600">
                    {category.description}
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-2">
                    {category.tools.map((tool, toolIndex) => (
                      <Badge key={toolIndex} variant="secondary" className="text-xs">
                        {tool}
                      </Badge>
                    ))}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* FAQ Section */}
      <section id="faq" className="py-16 px-4 bg-white">
        <div className="container mx-auto max-w-4xl">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-slate-900 mb-4">–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã</h2>
            <p className="text-slate-600">
              –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
            </p>
          </div>
          
          <Accordion type="single" collapsible className="w-full">
            {faqItems.map((item, index) => (
              <AccordionItem key={index} value={`item-${index}`} className="border-slate-200">
                <AccordionTrigger className="text-left text-slate-900 hover:text-indigo-600">
                  {item.question}
                </AccordionTrigger>
                <AccordionContent className="text-slate-600">
                  {item.answer}
                </AccordionContent>
              </AccordionItem>
            ))}
          </Accordion>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-16 px-4 bg-gradient-to-r from-indigo-600 to-purple-600">
        <div className="container mx-auto max-w-4xl text-center">
          <h2 className="text-3xl font-bold text-white mb-4">
            –ù–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò –¥–ª—è —Å–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
          </h2>
          <p className="text-indigo-100 mb-8 text-lg">
            –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Ç—ã—Å—è—á–∞–º —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–∫–æ—Ä–∏–ª–∏ —Å–≤–æ—é —Ä–∞–±–æ—Ç—É —Å –ø–æ–º–æ—â—å—é –ò–ò
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
              <DialogTrigger asChild>
                <Button size="lg" className="bg-white text-indigo-600 hover:bg-slate-50 px-8">
                  –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ
                </Button>
              </DialogTrigger>
            </Dialog>
            <Button size="lg" variant="outline" className="border-white text-white hover:bg-white hover:text-indigo-600 px-8" onClick={() => document.getElementById('tools')?.scrollIntoView({behavior: 'smooth'})}>
              –°–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            </Button>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer id="contacts" className="py-12 px-4 bg-slate-900">
        <div className="container mx-auto max-w-6xl">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-8 mb-8">
            <div>
              <div className="flex items-center space-x-2 mb-4">
                <div className="w-8 h-8 bg-gradient-to-br from-indigo-600 to-purple-600 rounded-lg flex items-center justify-center">
                  <Icon name="Zap" className="w-5 h-5 text-white" />
                </div>
                <h3 className="text-lg font-semibold text-white">AI Freelance Hub</h3>
              </div>
              <p className="text-slate-400 text-sm">
                –í—Å–µ –ª—É—á—à–∏–µ –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ñ—Ä–∏–ª–∞–Ω—Å–∏–Ω–≥–∞
              </p>
            </div>
            
            <div>
              <h4 className="text-white font-medium mb-3">–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞</h4>
              <ul className="space-y-2 text-sm text-slate-400">
                <li><a href="#tools" className="hover:text-white transition-colors">–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</a></li>
                <li><a href="#freelance" className="hover:text-white transition-colors">–î–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤</a></li>
                <li><a href="#faq" className="hover:text-white transition-colors">FAQ</a></li>
              </ul>
            </div>
            
            <div>
              <h4 className="text-white font-medium mb-3">–°–æ–æ–±—â–µ—Å—Ç–≤–æ</h4>
              <ul className="space-y-2 text-sm text-slate-400">
                <li><a href="#" className="hover:text-white transition-colors">Telegram</a></li>
                <li><a href="#" className="hover:text-white transition-colors">Discord</a></li>
                <li><a href="#" className="hover:text-white transition-colors">YouTube</a></li>
              </ul>
            </div>
            
            <div>
              <h4 className="text-white font-medium mb-3">–ü–æ–¥–¥–µ—Ä–∂–∫–∞</h4>
              <ul className="space-y-2 text-sm text-slate-400">
                <li><a href="mailto:support@aifreelancehub.ru" className="hover:text-white transition-colors">support@aifreelancehub.ru</a></li>
                <li><a href="#" className="hover:text-white transition-colors">–ü–æ–º–æ—â—å</a></li>
                <li><a href="#" className="hover:text-white transition-colors">–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</a></li>
              </ul>
            </div>
          </div>
          
          <div className="border-t border-slate-800 pt-8">
            <div className="flex flex-col md:flex-row justify-between items-center">
              <p className="text-slate-400 text-sm mb-4 md:mb-0">
                ¬© 2024 AI Freelance Hub. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.
              </p>
              <div className="flex space-x-6">
                <a href="#" className="text-slate-400 hover:text-white transition-colors">
                  <Icon name="Twitter" className="w-5 h-5" />
                </a>
                <a href="#" className="text-slate-400 hover:text-white transition-colors">
                  <Icon name="Github" className="w-5 h-5" />
                </a>
                <a href="#" className="text-slate-400 hover:text-white transition-colors">
                  <Icon name="Linkedin" className="w-5 h-5" />
                </a>
              </div>
            </div>
          </div>
        </div>
      </footer>
      
      {/* AI Chat Dialog - Full Screen */}
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent className="max-w-[95vw] max-h-[95vh] w-full h-full p-0">
          <div className="flex h-full">
            {/* Chat Area - Main */}
            <div className="flex-1 flex flex-col">
              <div className="border-b p-4 bg-white flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <span className="text-2xl">{selectedTool?.icon}</span>
                  <div>
                    <h3 className="font-semibold text-lg">{selectedTool?.name}</h3>
                    <p className="text-sm text-slate-600">{selectedTool?.description}</p>
                  </div>
                </div>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setShowAISelector(!showAISelector)}
                  className="flex items-center space-x-2"
                >
                  <Icon name="Users" className="w-4 h-4" />
                  <span>–°–º–µ–Ω–∏—Ç—å –ò–ò</span>
                </Button>
              </div>
              
              {/* Messages */}
              <ScrollArea className="flex-1 p-4">
                <div className="space-y-4 max-w-4xl mx-auto">
                  {getCurrentChat().length === 0 ? (
                    <div className="text-center py-12 text-slate-500">
                      <div className="text-6xl mb-4">{selectedTool?.icon}</div>
                      <h3 className="text-xl font-medium mb-2">–ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å {selectedTool?.name}</h3>
                      <p className="text-sm">–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É</p>
                      {selectedAI === 'collective' && (
                        <div className="mt-4 p-4 bg-gradient-to-r from-indigo-50 to-purple-50 rounded-lg max-w-md mx-auto">
                          <p className="text-sm font-medium text-indigo-900 mb-2">üß† –ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º</p>
                          <p className="text-xs text-indigo-700">–í—Å–µ –ò–ò –æ–±—Å—É–¥—è—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –¥–∞–¥—É—Ç –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç!</p>
                        </div>
                      )}
                    </div>
                  ) : (
                    getCurrentChat().map((message, index) => (
                      <div key={index} className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                        <div className={`max-w-[75%] p-4 rounded-lg ${
                          message.role === 'user' 
                            ? 'bg-indigo-600 text-white' 
                            : message.role === 'collective'
                            ? message.content.includes('–õ–£–ß–®–ò–ô –û–¢–í–ï–¢')
                              ? 'bg-gradient-to-r from-green-100 to-emerald-100 text-green-900 border-2 border-green-300'
                              : 'bg-gradient-to-r from-slate-50 to-slate-100 text-slate-900'
                            : 'bg-slate-100 text-slate-900'
                        }`}>
                          {message.role === 'collective' && message.aiName && (
                            <div className="flex items-center space-x-2 mb-2">
                              <span className="text-xs font-medium bg-white/20 px-2 py-1 rounded">
                                {message.aiName}
                              </span>
                            </div>
                          )}
                          <p className="text-sm whitespace-pre-wrap">{message.content}</p>
                        </div>
                      </div>
                    ))
                  )}
                </div>
              </ScrollArea>
              
              {/* Input Area */}
              <div className="border-t p-4 bg-white">
                <div className="max-w-4xl mx-auto">
                  <div className="flex space-x-3">
                    <Textarea 
                      placeholder={selectedAI === 'collective' ? '–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è...' : `–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ${selectedTool?.name}...`}
                      value={chatInput}
                      onChange={(e) => setChatInput(e.target.value)}
                      className="flex-1 min-h-[60px] resize-none text-base"
                      onKeyDown={(e) => {
                        if (e.key === 'Enter' && !e.shiftKey) {
                          e.preventDefault();
                          sendMessage();
                        }
                      }}
                    />
                    <Button 
                      onClick={sendMessage}
                      className="bg-indigo-600 hover:bg-indigo-700 px-6 h-auto"
                      disabled={!chatInput.trim()}
                    >
                      <Icon name="Send" className="w-5 h-5" />
                    </Button>
                  </div>
                  <p className="text-xs text-slate-500 mt-2">
                    Enter ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚Ä¢ Shift+Enter ‚Äî –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                  </p>
                </div>
              </div>
            </div>
            
            {/* AI Selection Sidebar - Collapsible */}
            {showAISelector && (
              <div className="w-80 border-l bg-slate-50 p-4 animate-slide-in-right">
                <div className="flex items-center justify-between mb-4">
                  <DialogTitle className="text-lg">–í—ã–±–æ—Ä –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞</DialogTitle>
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    onClick={() => setShowAISelector(false)}
                  >
                    <Icon name="X" className="w-4 h-4" />
                  </Button>
                </div>
                <ScrollArea className="h-full">
                  <div className="space-y-3">
                    {aiTools.map((tool) => (
                      <Button
                        key={tool.chatKey}
                        variant={selectedAI === tool.chatKey ? "default" : "ghost"}
                        className={`w-full justify-start text-left h-auto p-4 ${
                          selectedAI === tool.chatKey 
                            ? tool.chatKey === 'collective'
                              ? 'bg-gradient-to-r from-indigo-600 to-purple-600 text-white'
                              : 'bg-indigo-600 text-white'
                            : 'hover:bg-slate-100'
                        }`}
                        onClick={() => {
                          setSelectedAI(tool.chatKey);
                          setShowAISelector(false);
                        }}
                      >
                        <div className="flex items-center space-x-3 w-full">
                          <span className="text-2xl">{tool.icon}</span>
                          <div className="flex-1 text-left">
                            <div className="font-medium text-sm mb-1">{tool.name}</div>
                            <div className={`text-xs opacity-80 line-clamp-2 ${
                              selectedAI === tool.chatKey ? 'text-white/90' : 'text-slate-500'
                            }`}>
                              {tool.description}
                            </div>
                            {tool.isPopular && (
                              <Badge 
                                variant="secondary" 
                                className={`text-xs mt-2 ${
                                  selectedAI === tool.chatKey 
                                    ? 'bg-white/20 text-white/90' 
                                    : 'bg-indigo-100 text-indigo-700'
                                }`}
                              >
                                {tool.chatKey === 'collective' ? '–ù–û–í–û–ï' : '–ü–û–ü–£–õ–Ø–†–ù–û'}
                              </Badge>
                            )}
                          </div>
                        </div>
                      </Button>
                    ))}
                  </div>
                </ScrollArea>
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default Index;